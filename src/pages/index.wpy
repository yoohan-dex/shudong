<template>
  <view class="container">
    <view class="page page-list {{ tab === 0 ? 'visible' : 'hide' }}">
      <list></list>
    </view>
    <view class="page {{ tab === 1 ? 'visible' : 'hide' }}">
      <message></message>
    </view>
    <view class="page {{ tab === 2 ? 'visible' : 'hide' }}">
      <user></user>
    </view>
  </view>
  <view class="tabs" wx:if="{{ showTabs }}">
    <view class="tab" @tap="switchTapTo(0)">
      <image src="../assets/svgs/home-fill.svg" wx:if="{{ tab === 0 }}"></image>
      <image src="../assets/svgs/home.svg"      wx:else></image>
    </view>
    <view class="tab" @tap="switchTapTo(1)">
      <image src="../assets/svgs/message-fill.svg" wx:if="{{ tab === 1 }}"></image>
      <image src="../assets/svgs/message.svg"      wx:else></image>
      <view class="badge badge-number" wx:if="{{ unreadMessagesCount !== 0 }}">{{ unreadMessagesCount }}</view>
    </view>
    <view class="tab" @tap="switchTapTo(2)">
      <image src="../assets/svgs/my-fill.svg" wx:if="{{ tab === 2 }}"></image>
      <image src="../assets/svgs/my.svg"      wx:else></image>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import store from '../store'
import interfaces from '../interfaces'
import { api, version } from '../config'
import http from '../utils/request'

// tabs
import list from './list'
import message from './message'
import user from './user'

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '海大树洞BiuBiuBiu'
  }

  components = {
    list,
    message,
    user
  }

  data = {
    tab: 0,
    unreadMessagesCount: 0,
    userinfo: store.state.userinfo,
    tabs: ['list', 'message', 'user'],
    showTabs: false
  }

  methods = {
    switchTapTo (tabIndex) {
      tabIndex = parseInt(tabIndex)

      // 清空消息提醒
      // if (tabIndex === 1) {
      //   this.unreadMessagesCount = 0
      //   this.$apply()
      // }
      // 不需要清空吧？

      if (this.tab === tabIndex) {
        this.$invoke(this.tabs[tabIndex], 'onReload')
      } else {
        this.tab = tabIndex
        this.$invoke(this.tabs[tabIndex], 'onShow')
      }
    }
  }

  onShow () {
    const isNeedReloadList = wepy.getStorageSync('isNeedReloadList')
    if (isNeedReloadList === 'true') {
      // call list onShow in first load
      this.$invoke('list', 'onComponentLoad')
      wepy.setStorageSync('isNeedReloadList', 'false')
    }

    if (this.tab === 1) {
      this.$invoke('message', 'onShow')
    }
  }

  onPullDownRefresh () {
    this.$invoke(this.tabs[this.tab], 'onPullDownRefresh')
  }

  onReachBottom () {
    this.$invoke(this.tabs[this.tab], 'onReachBottom')
  }

  async onLoad () {
    const isInTest = wepy.getStorageSync(`isInTest-${version}`)
    if (isInTest === 'false') {
      this.showTabs = true
    } else {
      const { data } = await http({
        url: api.configs.url,
        method: api.configs.method
      })

      if (data.data.isTest === false) {
        this.showTabs = true
        wepy.setStorageSync(`isInTest-${version}`, 'false')
      }
    }

    try {
      await interfaces.login()
    } catch (e) {
      wepy.showModal({
        title: '提示',
        content: `用户登录失败，请截图本提示，并联系海大领沃团队。${e.message}`
      })
    }

    // call list onShow in first load
    this.$invoke('list', 'onComponentLoad')

    setTimeout(async () => {
      await this.loadNotifications()
    }, 0)

    setInterval(async () => {
      await this.loadNotifications()
    }, 10 * 1000)
  }

  async loadNotifications () {
    const notifications = await http({
      url: api.notifications.count.url,
      method: api.notifications.count.method
    })

    this.unreadMessagesCount = notifications.data.data.unreadMessagesCount
    this.$apply()
  }

  // onShareAppMessage () {
  //   return {
  //     title: '海大树洞',
  //     desc: '海大树洞首页~快来匿名发表树洞啊~',
  //     path: '/pages/index'
  //   }
  // }
}
</script>

<style lang="less">
.page {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding-bottom: 50px;
}
.page-list {
  position: static;
}
.visible {
  visibility: visible;
}
.hide {
  visibility: hidden;
}

.tabs {
  position: fixed;
  left: 0;
  bottom: 0;
  height: 50px;
  width: 100%;
  background: #FDFDFD;
  border-top: 1px solid #DDD;
  user-select: none;

  .tab {
    float: left;
    position: relative;
    width: 33.333333%;
    height: 50px;
    padding-top: 10px;
    text-align: center;
    user-select: none;

    image {
      width: 30px;
      height: 30px;
    }

    .badge {
      position: absolute;
      left: 50%;
      top: 12px;
      margin-left: 10px;
      width: 5px;
      height: 5px;
      border-radius: 50%;
      background: #FA6570;
      border: 1px solid #FDFDFD;
    }

    .badge-number {
      top: 7px;
      margin-left: 6px;
      width: 17px;
      height: 17px;
      border-radius: 50%;
      color: #FFF;
      font-size: 10px;
      font-weight: bold;
      text-align: center;
      line-height: 17px;
    }

    .badge-number-width {
      padding: 0 2px;
      width: auto;
      border-radius: 8px;
    }
  }
}
</style>
